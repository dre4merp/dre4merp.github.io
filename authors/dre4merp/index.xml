<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Dre4merp - 作者 - dre4merp's blog</title><link>http://dre4merp.github.io/authors/dre4merp/</link><description>Dre4merp - 作者 - dre4merp's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>dre4merp@gmail.com (dre4merp)</managingEditor><webMaster>dre4merp@gmail.com (dre4merp)</webMaster><lastBuildDate>Wed, 04 Dec 2024 17:28:09 +0800</lastBuildDate><atom:link href="http://dre4merp.github.io/authors/dre4merp/" rel="self" type="application/rss+xml"/><item><title>利用 Seclogon PPID Spoofing 实现 dump lsass 内存</title><link>http://dre4merp.github.io/2024/12/%E5%88%A9%E7%94%A8-seclogon-ppid-spoofing-%E5%AE%9E%E7%8E%B0-dump-lsass-%E5%86%85%E5%AD%98/</link><pubDate>Wed, 04 Dec 2024 17:28:09 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2024/12/%E5%88%A9%E7%94%A8-seclogon-ppid-spoofing-%E5%AE%9E%E7%8E%B0-dump-lsass-%E5%86%85%E5%AD%98/</guid><description><![CDATA[<p>最近分析银狐木马，发现其中利用 seclogon 服务实现了了一种父进程欺骗技术，就阅读了技术 <a href="https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-2.html" target="_blank" rel="noopener noreferrer">原文</a> 并做了以下总结。</p>
<h2 id="seclogon-ppid-spoofing" class="headerLink">
    <a href="#seclogon-ppid-spoofing" class="header-mark"></a>Seclogon PPID Spoofing</h2><h3 id="seclogon-流程分析" class="headerLink">
    <a href="#seclogon-%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90" class="header-mark"></a>seclogon 流程分析</h3><p>seclogon，叫做辅助登录服务，该服务是一个 RPC 服务。其主要功能为模拟特定用户登录并创建进程，通过观察其 idl 文件可以发现其主要实现了 <code>SeclCreateProcessWithLogonW</code> 函数。</p>]]></description></item><item><title>Heaven’s Gate</title><link>http://dre4merp.github.io/2023/11/heavens-gate/</link><pubDate>Sun, 26 Nov 2023 22:14:06 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2023/11/heavens-gate/</guid><description><![CDATA[<h2 id="introduction" class="headerLink">
    <a href="#introduction" class="header-mark"></a>Introduction</h2><p>天堂之门 (Heaven&rsquo;s Gate) 是一种专属于 Windows 操作系统的技术，其独特之处在于主要依赖于 Windows 上的 WoW64 子系统。其核心功能包括在运行于 x64 系统下的 x86（WoW64）进程中直接执行 64 位代码，以及直接调用 64 位 Windows API 函数。</p>]]></description></item><item><title>Explorer_dump_analysis</title><link>http://dre4merp.github.io/2023/11/explorer_dump_analysis/</link><pubDate>Tue, 14 Nov 2023 23:51:17 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2023/11/explorer_dump_analysis/</guid><description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>最近在工作中遇到了个桌面卡死问题，需要分析 dump 查找问题原因。第一次分析 dump 查找卡死问题，特此记录下。</p>
<h2 id="流程" class="headerLink">
    <a href="#%e6%b5%81%e7%a8%8b" class="header-mark"></a>流程</h2><h3 id="查看-explorer" class="headerLink">
    <a href="#%e6%9f%a5%e7%9c%8b-explorer" class="header-mark"></a>查看 explorer</h3><p>因为卡死的外在表现就是桌面进程卡死了，所以入手点就选在 explorer 进程中。</p>
<blockquote>
  <p>!process 0 0 explorer.exe</p>]]></description></item><item><title>About</title><link>http://dre4merp.github.io/about/</link><pubDate>Thu, 02 Nov 2023 22:53:39 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/about/</guid><description></description></item><item><title>深入理解 Windows 堆管理机制</title><link>http://dre4merp.github.io/2022/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-windows-%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</link><pubDate>Sun, 19 Jun 2022 23:36:55 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2022/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-windows-%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</guid><description><![CDATA[<h2 id="理解堆" class="headerLink">
    <a href="#%e7%90%86%e8%a7%a3%e5%a0%86" class="header-mark"></a>理解堆</h2><p>栈是分配局部变量和储存函数调用参数及返回地址的主要场所，栈空间是在程序设计时已经规定好怎么使用，使用多少内存空间的。栈变量在使用的时候不需要额外的申请操作，系统栈会根据函数中的变量声明自动在函数栈帧中给其预留空间。栈空间由系统维护，它的分配（如 sub esp ，xx ;）和回收（如 add esp，xxx）都由系统来完成，最终达到栈平衡。所有的这些对程序员来说都是透明的。</p>
<p>同时栈也存在一些不足之处。</p>
<ol>
<li>栈空间（尤其是内核态栈）的容量是相对较小的，其很难完成一些需要很大空间的操作。</li>
<li>栈空间会在函数返回时释放，不适合保存生命周期较长的变量和对象。</li>
<li>栈空间在程序编译时确定大小，无法分配运行期才能决定大小的缓冲区。</li>
</ol>
<p>堆（Heap）克服了栈的以上局限，是程序申请和使用内存空间的另一种重要途径。应用程序通过内存分配函数（如 malloc 或 HeapAlloc）或 new 操作符获得的内存空间都来自于堆。</p>]]></description></item><item><title>CVE 2022–26923 漏洞复现及分析</title><link>http://dre4merp.github.io/2022/06/cve-202226923-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</link><pubDate>Thu, 02 Jun 2022 23:38:03 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2022/06/cve-202226923-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</guid><description><![CDATA[<h2 id="漏洞信息" class="headerLink">
    <a href="#%e6%bc%8f%e6%b4%9e%e4%bf%a1%e6%81%af" class="header-mark"></a>漏洞信息</h2><h3 id="漏洞简述" class="headerLink">
    <a href="#%e6%bc%8f%e6%b4%9e%e7%ae%80%e8%bf%b0" class="header-mark"></a>漏洞简述</h3><ul>
<li>漏洞名称：AD域权限提升漏洞</li>
<li>漏洞编号：CVE-2022–26923</li>
<li>漏洞类型：设计缺陷</li>
<li>漏洞影响：权限提升</li>
<li>CVSS评分：3.1 8.8 / 7.7</li>
<li>利用难度：Medium</li>
<li>基础权限：需要</li>
</ul>
<h3 id="漏洞影响" class="headerLink">
    <a href="#%e6%bc%8f%e6%b4%9e%e5%bd%b1%e5%93%8d" class="header-mark"></a>漏洞影响</h3><p>受影响的 Windows 版本：</p>]]></description></item><item><title>Spring4Shell 漏洞复现及分析</title><link>http://dre4merp.github.io/2022/05/spring4shell-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</link><pubDate>Tue, 31 May 2022 23:36:00 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2022/05/spring4shell-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</guid><description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>2022 年 3 月 31 日，Spring Framework for Java 中的漏洞被公开披露，现已被给予编号 CVE-2022-22965。</p>
<p>Spring 框架是 Java 中使用最广泛的轻量级开源框架。在 Java Development Kit (JDK) 9.0 或更高版本中，远程攻击者可以通过框架的参数绑定特性获取 AccessLogValve 对象，并使用恶意字段值触发管道机制，并在某些条件下写入任意路径的文件。该漏洞现已被修补。</p>]]></description></item><item><title>CVE-2022-22947 漏洞复现及分析</title><link>http://dre4merp.github.io/2022/04/cve-2022-22947-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</link><pubDate>Thu, 07 Apr 2022 22:58:46 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2022/04/cve-2022-22947-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</guid><description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><h2 id="前置知识" class="headerLink">
    <a href="#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86" class="header-mark"></a>前置知识</h2><h3 id="api网关" class="headerLink">
    <a href="#api%e7%bd%91%e5%85%b3" class="header-mark"></a>API网关</h3><p>在微服务架构中，由于一个系统由多个服务组成，客户端不再直接请求服务，而是添加了API网关的概念。客户端直接向API网关发起请求，由API网关对请求进行处理，并分发给不同的服务。</p>
<p>具体区别如下图：</p>
<p><figure><a class="lightgallery" href="https://raw.githubusercontent.com/dre4merp/Drawing-bed/main/images/Gateway&amp;Direct.png" title="Gateway&amp;Direct" data-thumbnail="https://raw.githubusercontent.com/dre4merp/Drawing-bed/main/images/Gateway&amp;Direct.png" data-sub-html="<h2>Gateway&amp;Direct.png</h2><p>Gateway&amp;Direct</p>"><img  loading="lazy" src=https://raw.githubusercontent.com/dre4merp/Drawing-bed/main/images/Gateway&Direct.png   alt="Gateway&amp;Direct"  ></a><figcaption class="image-caption">Gateway&Direct.png</figcaption>
</figure></p>
<h3 id="spring-cloud-gateway" class="headerLink">
    <a href="#spring-cloud-gateway" class="header-mark"></a>Spring Cloud Gateway</h3><h4 id="概念" class="headerLink">
    <a href="#%e6%a6%82%e5%bf%b5" class="header-mark"></a>概念</h4><p>Spring Cloud Gateway 是 Spring Cloud 团队基于 Spring 5.0、Spring Boot 2.0 和 Project Reactor 等技术开发的高性能 API 网关组件。</p>
<p>Spring Cloud GateWay 最主要的功能就是路由转发，而在定义转发规则时主要涉及了以下三个核心概念，如下表。</p>]]></description></item><item><title>PrintNightmare 漏洞复现及分析</title><link>http://dre4merp.github.io/2021/12/printnightmare-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</link><pubDate>Fri, 31 Dec 2021 23:34:08 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2021/12/printnightmare-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%88%86%E6%9E%90/</guid><description><![CDATA[<h2 id="漏洞简介" class="headerLink">
    <a href="#%e6%bc%8f%e6%b4%9e%e7%ae%80%e4%bb%8b" class="header-mark"></a>漏洞简介</h2><p>前段时间，微软公布了名为<code>Windows PrintNightmare</code>的安全漏洞，获得编号<code>CVE-2021-34527</code>。其与漏洞<code>CVE-2021-1675</code>极其相似，都是通过加载DLL的方式实现代码执行。未经身份验证的远程攻击者可利用该漏洞以SYSTEM权限在域控制器上执行任意代码，从而获得整个域的控制权。微软对于该漏洞的修补工作并没有一步到位，在第一次漏洞爆出并发布修补程序后，仍可以通过其他方式绕过补丁继续利用该漏洞，微软不得不二次进行修补才成功杜绝该漏洞所带来的安全问题。</p>]]></description></item><item><title>sAMAccountName spoofing 完整分析</title><link>http://dre4merp.github.io/2021/12/samaccountname-spoofing-%E5%AE%8C%E6%95%B4%E5%88%86%E6%9E%90/</link><pubDate>Thu, 30 Dec 2021 23:21:55 +0800</pubDate><author><name>dre4merp</name><uri>https://github.com/dre4merp</uri><email>dre4merp@gmail.com</email></author><guid>http://dre4merp.github.io/2021/12/samaccountname-spoofing-%E5%AE%8C%E6%95%B4%E5%88%86%E6%9E%90/</guid><description><![CDATA[<h2 id="背景" class="headerLink">
    <a href="#%e8%83%8c%e6%99%af" class="header-mark"></a>背景</h2><p>漏洞编号为：<code>CVE-2021-42278</code> 和 <code>CVE-2021-42287</code></p>
<p>CVE-2021-42278：通常情况下，机器账户应以$结尾，即<code>DC$</code>。
但是AD域并没有对其进行强校验。通过建立与域控同名却不以$结尾的机器账户，即<code>DC</code>，对域控进行欺骗。</p>]]></description></item></channel></rss>